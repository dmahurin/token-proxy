#!/usr/bin/env node

const dns2 = require('dns2');
var net = require('net');

const dns = require('dns');
const fs = require("fs");
const ip = require("ip");

var Token;
try { Token = require('/etc/token-proxy/token.js'); }
catch(e) { Token = require('./token.js'); }
var config;
try { config = require('/etc/token-proxy/config.json'); }
catch(e) { config = {}; }

dns.setServers(['8.8.8.8']);

function read_host_files(files) {
	if(files === undefined) { return {}; }
	var host_lookup = {};
	for(var file of files) {
		var lines = fs.readFileSync('/etc/token-proxy/' + file, 'utf8').split(/\r?\n/);
		for (var line of lines) {
			if(line.charAt(0) == '#') { continue; }
			line = line.replace(/ *#.*/, '');
			var host = line.split(' ');
			if(host.length == 2) {
				if(host[0] === '0.0.0.0') { host[0] = null; }
				host_lookup[host[1]] = host[0];
			} else if (host.length == 1) {
				host_lookup[host[0]] = null;
			} else {
				console.log('unknown block host line ' + line);
			}
		}
	}
	return host_lookup;
}

config.block_hosts = read_host_files(config.block_hosts);
config.token_block_hosts = read_host_files(config.token_block_hosts);
config.hosts = read_host_files(config.hosts);

const { Packet } = dns2;

var end_time = Date.now() / 1000;

const dns_server = dns2.createServer((request, send, rinfo) => {
	const response = Packet.createResponseFromRequest(request);
	const [ question ] = request.questions;
	const { name } = question;

	function reply(name, address) {
		if(address) {
			response.answers.push({
				name,
				type: Packet.TYPE.A,
				class: Packet.CLASS.IN,
				ttl: 300,
				address: address
			});
			send(response);
		} else {
			response.header.rcode = 3;
			send(response);
		}
	}

	if(name == 'token') {
		reply(name, ip.address());
		return;
	}
	var address;
	if (undefined !== (address = config.hosts[name])) {
		reply(name, address);
	}

	var host_parts = name.split('.');
	while(host_parts.length > 1) {
		if(Date.now() / 1000 > end_time && null === (address = config.token_block_hosts[host_parts.join('.')])) {
			console.log('out of time ' + name);
			reply(name, address);
			return;
		} else if (null === (address = config.block_hosts[host_parts.join('.')])) {
			console.log('blocked ' + name);
			reply(name, address);
			return;
		}
		host_parts.shift();
	}

	dns.resolve(name, (err, records) => {
    reply(name, records !== undefined ? records[0] : null);
	});
});

dns_server.listen(53);

const http = require('http');

function process_query(query, res) {
	const now = Date.now()/1000;
	res.writeHead( 200, {'Content-Type': 'text/html', 'Cache-Control': 'no-cache'});
	res.write("<html><body><h1>Login</h1>\n");
		var token = query.indexOf('=');
		if(token > 0) {
			token = Number(query.substring(token+1));
			var n = Token.redeem(token);

			if(n) {
				end_time = now > end_time ? now : end_time;
				res.write("token added " + n/60 + " minutes<br>");
				end_time += n;
			} else if(n === 0) {
				res.write("token expired" + "<br>");
			} else {
				res.write("invalid token<br>");
			}
		}

		var remaining = Math.floor(((now > end_time) ? 0 : end_time - now)/60);

		res.write(
			"Time remaining: " + remaining + '<br>' +
			'<form method="post"><input type="text" id="number" name="number"><br>' +
			'<input type="submit" value="Submit">' +
			'</form></body></html>' +
			"</body></html>\r\n"
		);
		res.end();
}

var server = http.createServer(function (req, res) {
	if (req.method == 'POST') {
		var body = '';

		req.on('data', (data) => { body += data; });

		req.on('end', () => {
			process_query(body, res);
		});
	} else {
		process_query(req.url, res);
	}
}).listen(8080);

server.on('connect', function (req, socket, bodyhead) {
	var url = new URL('https://' + req.url);

	var host_parts = url.hostname.split('.');
	while(host_parts.length > 1) {
		if(Date.now() / 1000 > end_time && config.token_block_hosts[host_parts.join('.')] === null ||
			config.block_hosts[host_parts.join('.')] === null) {
			console.log('block ' + url.hostname);
			socket.end();
		}
		host_parts.shift();
	}

	var proxy_socket = new net.Socket();
	proxy_socket.connect(url.port || 443, url.hostname, function () {
			proxy_socket.write(bodyhead);
			socket.write("HTTP/" + req.httpVersion + " 200 Connection established\r\n\r\n");
		}
	);

	proxy_socket.on('data', function (chunk) {
		socket.write(chunk);
	});

	proxy_socket.on('end', function () {
		socket.end();
	});

	proxy_socket.on('error', function () {
		socket.write("HTTP/" + req.httpVersion + " 500 Connection error\r\n\r\n");
		socket.end();
	});

	socket.on('data', function (chunk) {
		proxy_socket.write(chunk);
	});

	socket.on('end', function () {
		proxy_socket.end();
	});

	socket.on('error', function () {
		proxy_socket.end();
	});
});

/* vim: set ts=2 sw=2 tw=0 noet: */
