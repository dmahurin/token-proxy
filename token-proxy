#!/usr/bin/env node

const dns2 = require('dns2');
var net = require('net');

const dns = require('dns');
const fs = require("fs");
const ip = require("ip");

const Token = require('./token.js');
dns.setServers(['8.8.8.8']);

const { Packet } = dns2;

var end_time = Date.now() / 1000;

const dns_server = dns2.createServer((request, send, rinfo) => {
	const response = Packet.createResponseFromRequest(request);
	const [ question ] = request.questions;
	const { name } = question;
	if(name == 'token') {
		response.answers.push({
			name,
			type: Packet.TYPE.A,
			class: Packet.CLASS.IN,
			ttl: 300,
			address: ip.address()
		});
		send(response);
		return;
	}
	if(Date.now() / 1000 > end_time) {
console.log('out of time ' + name);
		response.header.rcode = 3;
		send(response);
		return;
	}

	dns.resolve(name, (err, records) => {
		response.answers.push({
			name,
			type: Packet.TYPE.A,
			class: Packet.CLASS.IN,
			ttl: 300,
			address: records[0]
		});
		send(response);
	});
});

dns_server.listen(53);

const http = require('http');

function process_query(query, res) {
	const now = Date.now()/1000;
	res.writeHead( 200, {'Content-Type': 'text/html', 'Cache-Control': 'no-cache'});
	res.write("<html><body><h1>Login</h1>\n");
		var token = query.indexOf('=');
		if(token > 0) {
			token = Number(query.substring(token+1));
			var n = Token.redeem(token);

			if(n) {
				end_time = now > end_time ? now : end_time;
				res.write("token added " + n/60 + " minutes<br>");
				end_time += n;
			} else if(n === 0) {
				res.write("token expired" + "<br>");
			} else {
				res.write("invalid token<br>");
			}
		}

		var remaining = Math.floor(((now > end_time) ? 0 : end_time - now)/60);

		res.write(
			"Time remaining: " + remaining + '<br>' +
			'<form method="post"><input type="text" id="number" name="number"><br>' +
			'<input type="submit" value="Submit">' +
			'</form></body></html>' +
			"</body></html>\r\n"
		);
		res.end();
}

var server = http.createServer(function (req, res) {
	if (req.method == 'POST') {
		var body = '';

		req.on('data', (data) => { body += data; });

		req.on('end', () => {
			process_query(body, res);
		});
	} else {
		process_query(req.url, res);
	}
}).listen(8080);

server.on('connect', function (req, socket, bodyhead) {
	var url = new URL('https://' + req.url);

	var proxy_socket = new net.Socket();
	proxy_socket.connect(url.port || 443, url.hostname, function () {
			proxy_socket.write(bodyhead);
			socket.write("HTTP/" + req.httpVersion + " 200 Connection established\r\n\r\n");
		}
	);

	proxy_socket.on('data', function (chunk) {
		socket.write(chunk);
	});

	proxy_socket.on('end', function () {
		socket.end();
	});

	proxy_socket.on('error', function () {
		socket.write("HTTP/" + req.httpVersion + " 500 Connection error\r\n\r\n");
		socket.end();
	});

	socket.on('data', function (chunk) {
		proxy_socket.write(chunk);
	});

	socket.on('end', function () {
		proxy_socket.end();
	});

	socket.on('error', function () {
		proxy_socket.end();
	});
});

/* vim: set ts=2 sw=2 tw=0 noet: */
